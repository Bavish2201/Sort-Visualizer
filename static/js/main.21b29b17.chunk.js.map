{"version":3,"sources":["Components/Sort.js","Components/BubbleSort.js","Components/MergeSort.js","Components/Toolbar.js","Components/Canvas.js","App.js","serviceWorker.js","index.js"],"names":["Sort","array","this","n","length","sorted","BubbleSort","i","j","done","temp","MergeSort","auxarray","steps","curr_step","compute_steps","Toolbar","props","generateArray","bind","sort","state","currentIndex","speed","sorting","sortAlgo","timer","setState","Array","from","Math","floor","random","updateArray","reset","setInterval","step","clearInterval","className","map","algo","index","disabled","key","onClick","type","min","max","value","onChange","e","target","stop","Component","Canvas","current","id","number","width","window","screen","includes","style","height","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.21b29b17.chunk.js","sourcesContent":["class Sort {\r\n    constructor(array) {\r\n        this.array = array;\r\n        this.n = array.length;\r\n        this.sorted = false;\r\n    }\r\n}\r\n\r\nexport default Sort;","import Sort from './Sort';\r\n\r\nclass BubbleSort extends Sort {\r\n    constructor(array) {\r\n        super(array);\r\n        this.i = 0;\r\n        this.j = 0;\r\n    }\r\n\r\n    reset() {\r\n        this.sorted = false;\r\n        this.i = 0;\r\n        this.j = -1;\r\n        return [-1, -1];\r\n    }\r\n\r\n    step() {\r\n        let done = false;\r\n        if (this.i === this.n) {\r\n            done = true;\r\n        } else if (this.j === this.n-this.i-1 && this.sorted) {\r\n            done = true;\r\n        } else if (this.j === this.n-this.i-1) {\r\n            this.j = 0;\r\n            this.i++;\r\n            this.sorted = true;\r\n        } \r\n        if (this.array[this.j] > this.array[this.j+1]) {\r\n            let temp = this.array[this.j];\r\n            this.array[this.j] = this.array[this.j+1];\r\n            this.array[this.j+1] = temp;\r\n            this.sorted = false;\r\n            this.j++;\r\n        } else {\r\n            this.j++;\r\n        }\r\n        return [this.array, this.j, this.j+1, done];\r\n    }\r\n}\r\n\r\nexport default BubbleSort;\r\n","import Sort from './Sort';\r\n\r\nclass MergeSort extends Sort {\r\n    constructor(array) {\r\n        super(array);\r\n        this.auxarray = [];\r\n        this.steps = [];\r\n        this.curr_step = 0;\r\n        this.sorted = false;\r\n        this.compute_steps();\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default MergeSort;","import React, {Component} from 'react'\r\nimport BubbleSort from './BubbleSort';\r\nimport MergeSort from './MergeSort';\r\nimport './Toolbar.css';\r\n\r\nclass Toolbar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.generateArray = this.generateArray.bind(this);\r\n        this.sort = this.sort.bind(this)\r\n        this.state = {\r\n            array: [],\r\n            currentIndex: [],\r\n            length: 40,\r\n            speed: 50,\r\n            sorting: false,\r\n            sortAlgo: 0,\r\n            timer: null,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.generateArray();\r\n    }\r\n\r\n    generateArray() {\r\n        this.setState({\r\n            array: Array.from({length: this.state.length}, () => 10+ Math.floor(Math.random() * 1000)),\r\n            currentIndex: [],\r\n        }, () => {\r\n            this.props.updateArray(this.state.array, this.state.currentIndex);\r\n        })\r\n    }\r\n    \r\n    sort() {\r\n        let array = this.state.array;\r\n        var sortAlgo;\r\n        if (this.state.sortAlgo === 0) {\r\n            sortAlgo = new BubbleSort(array);\r\n        } else if (this.state.sortAlgo === 1) {\r\n            sortAlgo = new MergeSort(array);\r\n        }\r\n        let [i, j] = sortAlgo.reset();\r\n        let done = false;\r\n        var timer = setInterval(() => {\r\n            [array, i, j, done] = sortAlgo.step();  \r\n            this.setState({\r\n                array: array,\r\n                currentIndex: [i, j],\r\n                sorting: true,\r\n                timer: timer,\r\n            }, () => {\r\n                this.props.updateArray(this.state.array, this.state.currentIndex);\r\n            });\r\n            \r\n            if (done) {\r\n                this.setState({\r\n                    currentIndex: [],\r\n                    sorting: false,\r\n                    timer: null,\r\n                }, () => {\r\n                    this.props.updateArray(this.state.array, this.state.currentIndex);\r\n                });\r\n                clearInterval(timer);\r\n            }\r\n        }, this.state.speed*1.5);\r\n    }\r\n\r\n    stop() {\r\n        clearInterval(this.state.timer);\r\n        this.setState({\r\n            sorting: false,\r\n            timer: null,\r\n            currentIndex: [],\r\n        }, () => {\r\n            this.props.updateArray(this.state.array, this.state.currentIndex);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const ALGOS = [\"Bubble Sort\"];\r\n        return (\r\n            <div className={\"toolbar\"}>\r\n                \r\n                <div className={\"controlPanel alignLeft\"}>\r\n                    <span className={\"ProjectTitle alignLeft\"}>\r\n                        VisualSort\r\n                    </span>\r\n                    \r\n                    <span className={\"algoButtonContainer\"}>\r\n                        <div>\r\n                            {ALGOS.map((algo, index) => {\r\n                                return <button disabled={this.state.sorting}\r\n                                    key={index}\r\n                                    className={ this.state.sortAlgo === index ? \"selectedAlgoButton\" : \"algoButton\"}\r\n                                    onClick={ () => {\r\n                                        this.setState({sortAlgo: index})\r\n                                    }}\r\n                                >{algo}</button>\r\n                            })}\r\n                        </div>\r\n                    </span>\r\n\r\n                    <span>\r\n                        <button disabled={this.state.sorting} className=\"generateArrayButton\" onClick={this.generateArray}>Generate Array</button>\r\n                    </span>\r\n\r\n                    <span className=\"controlLabel\">Array Length:</span>\r\n                    <span>\r\n                        <input \r\n                            type=\"range\" \r\n                            min=\"10\" \r\n                            max=\"100\" \r\n                            value={this.state.length}\r\n                            disabled={this.state.sorting}\r\n                            className=\"arrayLenghtSelector controlSelector\" \r\n                            onChange={(e) => {\r\n                                this.setState({\r\n                                    length: e.target.value,\r\n                                });\r\n                            }}\r\n                        />\r\n                    </span>\r\n\r\n                    <span className=\"controlLabel\">Speed:</span>\r\n                    <span>\r\n                        <input \r\n                            type=\"range\" \r\n                            min=\"10\" \r\n                            max=\"100\" \r\n                            disabled={this.state.sorting}\r\n                            value={110-this.state.speed}\r\n                            className=\"speedSelector controlSelector\" \r\n                            onChange={(e) => {\r\n                                this.setState({\r\n                                    speed: 110 - e.target.value,\r\n                                });\r\n                            }}\r\n                        />\r\n                    </span>\r\n\r\n                    <span>\r\n                        <button \r\n                            className=\"sortButton\"\r\n                            onClick={() => {\r\n                                if (this.state.sorting) {\r\n                                    this.stop();\r\n                                } else {\r\n                                    this.sort();\r\n                                }\r\n                            }}\r\n                        >\r\n                            {this.state.sorting ? \"Stop\" : \"Sort\"}\r\n                        </button> \r\n                    </span>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Toolbar;","import React, {Component} from 'react';\r\nimport Toolbar from './Toolbar';\r\nimport './Canvas.css';\r\n\r\nclass Canvas extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateArray = this.updateArray.bind(this);\r\n        this.state = {\r\n            array: [],\r\n            currentIndex: [],\r\n        }\r\n    }\r\n\r\n    updateArray(array, currentIndex) {\r\n        this.setState({\r\n            array: array,\r\n            currentIndex: currentIndex,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const array = this.state.array,\r\n            current = this.state.currentIndex;\r\n        return (\r\n            <div>\r\n                <Toolbar \r\n                    updateArray={this.updateArray}>\r\n                </Toolbar>\r\n                <div id=\"arrayBarContainer\">\r\n                    { array.length ? array.map((number, index) => {\r\n                        const width = `${window.screen.width*0.40/this.state.array.length}px`;\r\n                        return <div\r\n                            key={index} \r\n                            className = {current.includes(index) ? \"currentArrayBar arrayBar\" : \"arrayBar\"}\r\n                            style={{width: width, height: `${number/1500*window.screen.height}px`}}>\r\n                        </div>\r\n                    }) : null\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Canvas;","import React from 'react';\nimport './App.css';\nimport Canvas from './Components/Canvas'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Canvas />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}